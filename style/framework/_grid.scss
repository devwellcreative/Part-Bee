$settings: (
    maxWidth: ($width * $columns) + ($columns - 1) * $gutter,
    columns: $columns,
    margin: $gutter/2
);

$breakpoints: (
    xs: (
        label: "Mobile",
        mediaQuery: "(min-width: 0px)",
        maxQuery: "(max-width: 480px)",
        rangeQuery: "(max-width: 480px)",
        maxWidth: none
    ),
    sm: (
        label: "Mobile Landing",
        mediaQuery: "(min-width: 481px)",
        maxQuery: "(min-width: 481px) and (max-width: 768px)",
        rangeQuery: "(max-width: 768px)",
        maxWidth: none
    ),
    md: (
        label: "Tablet",
        mediaQuery: "(min-width: 769px)",
        maxQuery: "(min-width: 769px) and (max-width: 1200px)",
        rangeQuery: "(max-width: 1200px)",
        maxWidth: none
    ),
    lg: (
        label: "PC",
        mediaQuery: "(min-width: 1025px)",
        maxQuery: "(min-width: 1025px) and (max-width: 1200px)",
        rangeQuery: "(max-width: 1200px)",
        maxWidth: 960px
    ),
    xl: (
        label: "Big resolutions",
        mediaQuery: "(min-width: 1201px)",
        maxQuery: "(min-width: 1201px)",
        rangeQuery: "(min-width: 1201px)",
        maxWidth: 68vw
    ),
);

@mixin renderGridStyles($settings) {
    @each $key, $breakpoint in $breakpoints {
         @if $key == xs{
            @include renderGrid($key, $settings);
        }
        @else {
             @include media(map-get($breakpoint, "mediaQuery")){
                @include renderGrid($key, $settings);
            }

            @include noBootstrapStatus(true){
                @include media(map-get($breakpoint, "maxQuery")){
                    .container{
                        max-width: map-get($breakpoint, "maxWidth");
                    }
                }
            };
        }
        @include renderDebugResponsive($key, $breakpoint);
    }
}
@mixin renderGridDebug($settings) {
    @each $key, $breakpoint in $breakpoints {
        @include renderDebugResponsive($key, $breakpoint);
    }
}

@mixin renderGrid($key, $settings) {
    $i: 1;
    .col-#{$key}-offset-0 {
        @include noBootstrapStatus(true){
            margin-left: 0;
        }
    }
    @while $i <= map-get($settings, "columns") {
        .col-#{$key}-#{$i} {
            @include noBootstrapStatus(true){
                width: 100% * $i / map-get($settings,"columns");
                @extend %col-settings;
            }

            // Margin top and bottom in XS mode
            @if $key == xs{
              margin-top: $md/3;
              margin-bottom: $md/3;
            }

            @extend %col-debug;
        }
        .col-#{$key}-offset-#{$i} {
            @include noBootstrapStatus(true){
                margin-left: 100% * $i / map-get($settings,"columns");
            }
        }
        $i: $i+1;
    }
}
@mixin renderDebugResponsive($key, $breakpoint) {
    @include media(map-get($breakpoint, "maxQuery")) {
        body.debug {
            &:before {
                content: "#{$key}";
            }
            &:after {
                content: map-get($breakpoint, "label");
            }
        }
    };
}

@include media(screen) {
    %col-settings {
        @include noBootstrapStatus(true){
            float: left;
            padding-right: map-get($settings, "margin");
            padding-left: map-get($settings, "margin");
            position: relative;
            min-height: 1px;
        }
    }

    %col-debug{
        .debug &{
            @extend %debug;
        }
    }

    %debug {
        padding-right: 0;
        padding-left: 0;
        border-right: map-get($settings, "margin") solid rgba(0, 186, 255, 0.1);
        border-left: map-get($settings, "margin") solid rgba(0, 186, 255, 0.1);
        background-color: rgba(235, 0, 255, 0.1);

        &:hover{
            border-right-color: rgba(0, 186, 255, 0.3);
            border-left-color: rgba(0, 186, 255, 0.3);
            background-color: rgba(235, 0, 255, 0.3);
        }
    }
}

%clearfix {
    &:after {
        clear: both;
    }

    &:after,
    &:before {
        display: table;
        content: "";
    }
}
%debug-labels {
    position: fixed;
    content: "";
    top: 5px;
    left: 5px;
    font: $font_debug;
    line-height: 25px;
    font-size: 16px;
    text-transform: uppercase;
}

@include noBootstrapStatus(true){
    * {
        @include box-sizing(border-box);
    }
    .container {
        max-width: map-get($settings, "maxWidth");
        padding-right: map-get($settings, "margin");
        padding-left: map-get($settings, "margin");
        margin-right: auto;
        margin-left: auto;
        @extend %clearfix;
    }
    .row {
        margin-right: map-get($settings, "margin") * -1;
        margin-left: map-get($settings, "margin") * -1;
        @extend %clearfix;
    }
}

@include renderGridStyles($settings);
@include renderGridDebug($settings);

body.debug {
    &:before {
        @extend %debug-labels;
        width: 25px;
        height: 25px;
        text-align: center;
        display: block;
        border-radius: 2px;
        color: $color_text_contrast;
        mix-blend-mode: multiply;
        @include noBootstrapStatus(true){    background-color: $c_alpha; }
        @include noBootstrapStatus(false){   background-color: $c_gama;  }
    }

    &:after {
        @extend %debug-labels;
        left: 35px;
        mix-blend-mode: multiply;
        @include noBootstrapStatus(true){     color: $c_alpha;    }
        @include noBootstrapStatus(false){    color: $c_gama;    }
    }
}
